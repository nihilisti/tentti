{"version":3,"sources":["TenttiNav.js","Exams.js","Drop.js","ChatInput.js","ChatMessage.js","Chat.js","App.js","AppAdd.js","reportWebVitals.js","index.js"],"names":["Nav","className","to","path","reducer","state","action","deepCopy","JSON","parse","stringify","type","count","data","answerIndex","answer","newText","Error","Exams","useState","palautus","activeQuestions","setActiveQuestions","useReducer","dispatch","data2","setData2","setDataAlustettu2","useEffect","a","axios","get","result","length","i","kysymykset","id","console","log","fetchData","map","tentit","index","name","onClick","changeExam","nimi","Drop","onDrop","acceptedFiles","getRootProps","getInputProps","ChatInput","message","onSubmit","e","preventDefault","props","onSubmitMessage","setState","placeholder","value","this","onChange","target","Component","URL","Chat","messages","ws","WebSocket","addMessage","submitMessage","messageString","send","onopen","onmessage","evt","onclose","ChatMessage","htmlFor","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","locale","document","getElementById"],"mappings":"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","file":"static/js/main.dd6e9353.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Nav = () => {\r\n    return (\r\n            <div className=\"container\">\r\n                <div className=\"links\">\r\n                    <Link to=\"/\" className=\"button\">Etusivu</Link>\r\n                    <Link to=\"/exams\" className=\"button\">Tentit</Link>\r\n                    <Link to=\"/drop\" className=\"button\">Lataa tiedostoja</Link>\r\n                    <Link to=\"/chat\" className=\"button\">Chat</Link>\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Nav;","import { useState, useReducer } from 'react';\r\nimport React, { useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './App.css';\r\n\r\nvar path = null\r\n\r\nswitch (process.env.NODE_ENV) {\r\n  case 'production':\r\n    path = 'https://tenttiappi.herokuapp.com'\r\n    break;\r\n  case 'development':\r\n    path = 'http://localhost:5000'\r\n    break;\r\n  case 'test':\r\n    path = 'http://localhost:5000'\r\n    break;\r\n  default:\r\n    throw \"Environment not properly set!\"\r\n}\r\n\r\nfunction reducer(state, action) {\r\n    let deepCopy = JSON.parse(JSON.stringify(state))\r\n    switch (action.type) {\r\n        case 'increment':\r\n            return { count: state.count + 1 };\r\n\r\n        case \"ANSWER_CHANGED\":\r\n            deepCopy[action.data.answerIndex].answer = action.data.newText;\r\n            return deepCopy\r\n\r\n        // case 'IHMISEN_LISAYS':\r\n        //   let uusiHenkilö = { uid: uuid(), etunimi: \"\", sukunimi: \"\", ikä: 0 }\r\n        //   syväKopio.push(uusiHenkilö)\r\n        //   return syväKopio\r\n\r\n        // case 'IHMISEN_POISTO':\r\n        //   syväKopio.splice(action.data, 1)\r\n        //   return syväKopio\r\n\r\n        case \"INIT_DATA\":\r\n            return action.data\r\n\r\n        default:\r\n            throw new Error();\r\n    }\r\n}\r\n\r\nconst Exams = () => {\r\n\r\n    const [palautus, setPalautus] = useState(false)\r\n    // const [dataAlustettu, setDataAlustettu] = useState(false)\r\n    const [activeQuestions, setActiveQuestions] = useState([])\r\n    // const [showExam, setShowExam] = useState(0)\r\n    const [state, dispatch] = useReducer(reducer, []);\r\n\r\n    const [data2, setData2] = useState([])\r\n    const [dataAlustettu2, setDataAlustettu2] = useState(false)\r\n\r\n    const [locale, setLocale] = useState('en')\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchData = async () => {\r\n            try {\r\n                let result = await axios.get(path + \"/tentit\")\r\n\r\n                if (result.data.length > 0) {\r\n                    for (var i = 0; i < result.data.length; i++) {\r\n                        result.data[i].kysymykset = []\r\n                        let kysymykset = await axios.get(path + \"/tenttikysymykset/\" + result.data[i].id)\r\n                        result.data[i].kysymykset = kysymykset.data\r\n\r\n                        // if (result.data[i].kysely.length > 0){\r\n                        //   for (var j = 0; j < result.data[i].kysely.length; j++){\r\n                        //     result.data[i].kysely[j].vastaukset = []\r\n                        //     let vaihtoehdot  = await axios.get(path + \"/vaihtoehdot/\" + result.data[i].kysely[j].kysymys_id)\r\n                        //     result.data[i].kysely[j].vaihtoehdot = vaihtoehdot.data\r\n                        //   }\r\n                        // }\r\n                    }\r\n\r\n                    setData2(result.data)\r\n                    setDataAlustettu2(true)\r\n\r\n                    dispatch({ type: \"INIT_DATA\", data: result.data })\r\n                } else {\r\n                    throw (\"Nyt pitää data kyllä alustaa!\")\r\n                }\r\n            }\r\n            catch (exception) {\r\n                // createData();\r\n                console.log(exception)\r\n            }\r\n        }\r\n        fetchData();\r\n    }, [])\r\n\r\n    //SEH -> Structured Exception Handling\r\n    // useEffect(() => {\r\n\r\n    //   const updateData = async () => {\r\n    //     try {\r\n    //       let result = await axios.put(\"http://localhost:3005/bugs\", state)\r\n    //     } catch (exception) {\r\n    //       console.log(\"Datan päivitys ei onnistunut\")\r\n    //     }\r\n    //     finally {\r\n\r\n    //     }\r\n    //   }\r\n\r\n    //   if (dataAlustettu) {\r\n    //     updateData();\r\n    //   }\r\n    // }, [state])\r\n\r\n    // useEffect(() => {\r\n    //   let jemma = window.localStorage;\r\n    //   let newData = jemma.getItem(\"data\")\r\n    //   if (!newData) {\r\n    //     jemma.setItem(\"data\", JSON.stringify(data))\r\n    //     newData = data\r\n    //   } else {\r\n    //     setData(JSON.parse(newData));\r\n    //   }\r\n    // }, [])\r\n\r\n    // const buttonPressed = () => {\r\n    //   let newData = JSON.parse(JSON.stringify(data))\r\n    //   let finalData = data.concat(newData)\r\n    //   setData(finalData)\r\n    // }\r\n\r\n    // const answerPicked = (mainIndex, parentIndex, answerIndex, event) => {\r\n    //   let deepCopy = JSON.parse(JSON.stringify(data))\r\n    //   deepCopy[mainIndex].questions[parentIndex].answers[answerIndex].picked = event.target.checked;\r\n    //   setData(deepCopy)\r\n    // }\r\n\r\n    // const showAnswers = (item) => {\r\n    //   setPalautus(true)\r\n    // }\r\n\r\n    // const changeQuestions = (index) => {\r\n    //   setActiveQuestions(index)\r\n    // }\r\n\r\n    const changeExam = (index) => {\r\n        setActiveQuestions(index)\r\n    }\r\n\r\n    if (data2.length < 1)\r\n        return <>loading...</>\r\n\r\n    return (\r\n        <div className=\"main\">\r\n            <div className=\"buttonContainer\">\r\n                {data2.map((tentit, index) => <button\r\n                    key={index}\r\n                    name={\"TenttiButton\"}\r\n                    className=\"button2\"\r\n                    onClick={() => changeExam(index)}>{tentit.nimi}</button>)\r\n                }\r\n            </div>\r\n            {palautus === false && state[activeQuestions] && state[activeQuestions].kysymykset.map((kysymykset, index) =>\r\n                <div className=\"questions\">\r\n                    <div className=\"questionTitle\" key={index}>\r\n                        {kysymykset.nimi}\r\n                    </div>\r\n                    {/* {vaihtoehdot.nimi && <AnswerList index={index} parentIndex={activeQuestions} answers={vaihtoehdot.nimi} />} */}\r\n                </div>)}\r\n            <button className=\"button\">Näytä vastaukset</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Exams;","import React from 'react';\r\nimport './App.css';\r\nimport Dropzone from 'react-dropzone';\r\n\r\nconst Drop = () => {\r\n    return (\r\n        <div className=\"main\">\r\n            <Dropzone onDrop={acceptedFiles => console.log(acceptedFiles)}>\r\n                {({ getRootProps, getInputProps }) => (\r\n                    <section>\r\n                        <div className=\"drop\" {...getRootProps()}>\r\n                            <input {...getInputProps()} />\r\n                            <p>Drag 'n' drop some files here, or click to select files</p>\r\n                        </div>\r\n                    </section>\r\n                )}\r\n            </Dropzone>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Drop;","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass ChatInput extends Component {\r\n    static propTypes = {\r\n        onSubmitMessage: PropTypes.func.isRequired,\r\n    }\r\n    state = {\r\n        message: '',\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form\r\n                action=\".\"\r\n                onSubmit={e => {\r\n                    e.preventDefault()\r\n                    this.props.onSubmitMessage(this.state.message)\r\n                    this.setState({ message: '' })\r\n                }}\r\n            >\r\n                <div className=\"textarea\">\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder={'Enter message...'}\r\n                        className=\"msgInput\"\r\n                        value={this.state.message}\r\n                        onChange={e => this.setState({ message: e.target.value })}\r\n                    />\r\n                </div>\r\n                {/* <div className=\"box\">\r\n                    <input type=\"submit\" className=\"submit\" value={'Send'} />\r\n                </div> */}\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ChatInput;","import React from 'react'\r\n\r\nexport default ({ name, message }) =>\r\n    <div className=\"msgItem\">\r\n        <div className=\"name\">{name}</div>\r\n        <div className=\"message\">\r\n            <div className=\"msgContent\">{message}</div>\r\n        </div>\r\n    </div>","import React, { Component } from 'react'\r\nimport { useState } from 'react'\r\nimport ChatInput from './ChatInput'\r\nimport ChatMessage from './ChatMessage'\r\nimport './App.css';\r\n\r\nconst URL = 'ws://localhost:3030'\r\n\r\nclass Chat extends Component {\r\n    state = {\r\n        name: 'Bob',\r\n        messages: [],\r\n    }\r\n\r\n    ws = new WebSocket(URL)\r\n\r\n    componentDidMount() {\r\n        this.ws.onopen = () => {\r\n            // on connecting, do nothing but log it to the console\r\n            console.log('connected')\r\n        }\r\n\r\n        this.ws.onmessage = evt => {\r\n            // on receiving a message, add it to the list of messages\r\n            const message = JSON.parse(evt.data)\r\n            this.addMessage(message)\r\n        }\r\n\r\n        this.ws.onclose = () => {\r\n            console.log('disconnected')\r\n            // automatically try to reconnect on connection loss\r\n            this.setState({\r\n                ws: new WebSocket(URL),\r\n            })\r\n        }\r\n    }\r\n\r\n    addMessage = message =>\r\n        this.setState(state => ({ messages: [...state.messages, message] }))\r\n\r\n    submitMessage = messageString => {\r\n        // on submitting the ChatInput form, send the message, add it to the list and reset the input\r\n        const message = { name: this.state.name, message: messageString }\r\n        this.ws.send(JSON.stringify(message))\r\n        this.addMessage(message)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"main2\">\r\n                <div className=\"chat\">\r\n                    <div className=\"header\">\r\n                        <div className=\"x\">x</div>\r\n                        <div className=\"title\">\r\n                            <h1>IdealChat</h1>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"conversation\">\r\n                        <i className=\"italic\">Welcome to IdealChat!</i>\r\n                        {this.state.messages.map((message, index) =>\r\n                            <ChatMessage\r\n                                key={index}\r\n                                message={message.message}\r\n                                name={message.name}\r\n                            />,\r\n                        )}\r\n                    </div>\r\n                    <div className=\"footer\">\r\n                        <label htmlFor=\"name\" className=\"msgItem\">\r\n                            Name:&nbsp;\r\n          <input\r\n                                type=\"text\"\r\n                                id={'name'}\r\n                                placeholder={'Enter your name...'}\r\n                                value={this.state.name}\r\n                                onChange={e => this.setState({ name: e.target.value })}\r\n                            />\r\n                        </label>\r\n                        <ChatInput\r\n                            ws={this.ws}\r\n                            onSubmitMessage={messageString => this.submitMessage(messageString)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Chat","import React from 'react';\nimport './App.css';\nimport Nav from './TenttiNav';\n// import uuid from 'react-uuid';\nimport Welcome from './Welcome';\nimport Exams from './Exams';\nimport Drop from './Drop';\nimport Chat from './Chat';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <Nav />\n      <Switch>\n        <Route path=\"/exams\">\n          <Exams />\n        </Route>\n        <Route path=\"/drop\">\n          <Drop />\n        </Route>\n        <Route path=\"/chat\">\n          <Chat />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;","import { useState } from 'react';\r\nimport React, { useEffect } from 'react';\r\nimport './App.css';\r\nimport Nav from './TenttiNav';\r\n// import AnswerList from './AnswerList';\r\nimport AddAnswers from './AddAnswers';\r\n\r\nfunction App() {\r\n\r\n    const [data, setData] = useState([\r\n        {\r\n            bugs: \"Hyönteiset\", questions: [\r\n                {\r\n                    question: 'Mikä on Vespula vulgaris?',\r\n                    answers: [\r\n                        { answer: \"Piha-ampiainen\", correct: true, picked: false },\r\n                        { answer: \"Isopihtihäntä\", correct: false, picked: false },\r\n                        { answer: \"Suursukeltaja\", correct: false, picked: false },\r\n                        { answer: \"Sarvikuonokas\", correct: false, picked: false },\r\n                    ]\r\n                },\r\n                {\r\n                    question: 'Mikä on Hymenopus coronatus?',\r\n                    answers: [\r\n                        { answer: \"Ritariperhonen\", correct: false, picked: false },\r\n                        { answer: \"Orkidearukoilijasirkka\", correct: true, picked: false },\r\n                        { answer: \"Kultaheinäsirkka\", correct: false, picked: false },\r\n                        { answer: \"Täpläpaarma\", correct: false, picked: false },\r\n                    ]\r\n                },\r\n            ]\r\n        },\r\n        {\r\n            bugs: \"Hämähäkkieläimet\", questions: [\r\n                {\r\n                    question: 'Mikä on Mitopus morio?',\r\n                    answers: [\r\n                        { answer: \"Täplälukki\", correct: false, picked: false },\r\n                        { answer: \"Seinälukki\", correct: false, picked: false },\r\n                        { answer: \"Keisarilukki\", correct: false, picked: false },\r\n                        { answer: \"Metsälukki\", correct: true, picked: false },\r\n                    ]\r\n                },\r\n                {\r\n                    question: 'Mikä on Pandinus imperator?',\r\n                    answers: [\r\n                        { answer: \"Keisariskorpioni\", correct: true, picked: false },\r\n                        { answer: \"Kenttäskorpioni\", correct: false, picked: false },\r\n                        { answer: \"Brontoscorpio (ukkosskorpioni)\", correct: false, picked: false },\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    ])\r\n\r\n    const [palautus, setPalautus] = useState(false)\r\n    const [activeTest, setActiveTest] = useState(0)\r\n    const [showExam, setShowExam] = useState(0)\r\n\r\n    useEffect(() => {\r\n        let jemma = window.localStorage;\r\n        let newData = jemma.getItem(\"data\")\r\n        if (!newData) {\r\n            jemma.setItem(\"data\", JSON.stringify(data))\r\n            newData = data\r\n        } else {\r\n            setData(JSON.parse(newData));\r\n        }\r\n    }, [])\r\n\r\n    // const buttonPressed = () => {\r\n    //     let newData = JSON.parse(JSON.stringify(data))\r\n    //     let finalData = data.concat(newData)\r\n    //     setData(finalData)\r\n    // }\r\n\r\n    const answerPicked = (examIndex, questionIndex, answerIndex, event) => {\r\n        let deepCopy = JSON.parse(JSON.stringify(data))\r\n        deepCopy[examIndex].questions[questionIndex].answers[answerIndex].picked = event.target.checked;\r\n        setData(deepCopy)\r\n    }\r\n\r\n    const showAnswers = (examIndex, questionIndex, answerIndex, event) => {\r\n        let deepCopy = JSON.parse(JSON.stringify(data))\r\n        deepCopy[examIndex].questions[questionIndex].answers[answerIndex].correct = event.target.checked;\r\n        setData(deepCopy)\r\n    }\r\n\r\n    const changeQuestions = (index) => {\r\n        setActiveTest(index)\r\n    }\r\n\r\n    const addItem = (mainIndex, questionIndex) => {\r\n        let deepCopy = JSON.parse(JSON.stringify(data))\r\n        deepCopy[mainIndex].questions[questionIndex].answers.push({ answer: \"\", correct: false, picked: false })\r\n        setData(deepCopy)\r\n    }\r\n\r\n    // props.itemEdited(props.parentIndex, props.index, answerIndex, event)\r\n\r\n    const itemEdited = (mainIndex, questionIndex, answerIndex, event) => {\r\n        let deepCopy = JSON.parse(JSON.stringify(data))\r\n        deepCopy[mainIndex].questions[questionIndex].answers[answerIndex].answer = event.target.value;\r\n        setData(deepCopy)\r\n    }\r\n\r\n    const deleteItem = (examIndex, questionIndex, answerIndex) => {\r\n        let deepCopy = JSON.parse(JSON.stringify(data))\r\n        deepCopy[examIndex].questions[questionIndex].answers.splice(answerIndex, 1)\r\n        setData(deepCopy)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Nav />\r\n            <div className=\"main\">\r\n                <div className=\"mainContainer\">\r\n                    <div className=\"buttonContainer\">\r\n                        {data.map((bugs, index) => <button\r\n                            key={index}\r\n                            className=\"button2\"\r\n                            onClick={() => changeQuestions(index)}>{bugs.bugs}</button>)\r\n                        }\r\n                    </div>\r\n                    {palautus === false && data[activeTest].questions.map((item, questionIndex) =>\r\n                        <div className=\"questions\">\r\n                            <input className=\"input\" value={item.question}></input>\r\n                            {item.answers && <AddAnswers questionIndex={questionIndex}\r\n                                examIndex={activeTest}\r\n                                answers={item.answers}\r\n                                answerPicked={answerPicked}\r\n                                itemEdited={itemEdited}\r\n                                deleteItem={deleteItem} />}\r\n                            <div className=\"buttonContainer\">\r\n                                <button className=\"button3\" onClick={() => addItem(activeTest, questionIndex)}>+</button>\r\n                            </div>\r\n                        </div>)}\r\n                    <div className=\"buttonContainer\">\r\n                        <button className=\"button\" onClick={() => showAnswers(activeTest)}>Näytä vastaukset</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport AppAdd from './AppAdd';\nimport reportWebVitals from './reportWebVitals';\nimport { IntlProvider } from \"react-intl\";\n\nReactDOM.render(\n  <IntlProvider locale='en'>\n    <App />\n  </IntlProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}