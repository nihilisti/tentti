{"version":3,"sources":["TenttiNav.js","App.js","AppAdd.js","reportWebVitals.js","index.js"],"names":["Nav","className","href","path","messages","en","heading","fi","reducer","state","action","deepCopy","JSON","parse","stringify","type","count","data","answerIndex","answer","newText","Error","App","props","useState","palautus","activeQuestions","setActiveQuestions","useReducer","dispatch","data2","setData2","setDataAlustettu2","locale","setLocale","useEffect","a","axios","get","result","length","i","kysymykset","id","console","log","fetchData","defaultMessage","value","year","month","day","weekday","date","onChange","e","target","defaultValue","map","x","tentit","index","name","onClick","changeExam","nimi","onDrop","acceptedFiles","getRootProps","getInputProps","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d9a82301.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nconst Nav = () => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"links\">\r\n                <button href=\"/tentit\" className=\"button\">Tentit</button>\r\n                <button href=\"/tietoa\" className=\"button\">Tietoa sovelluksesta</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav;","import { useState, useReducer } from 'react';\nimport React, { useEffect } from 'react';\nimport './App.css';\nimport Nav from './TenttiNav';\n// import AnswerList from './AnswerList';\n// import uuid from 'react-uuid';\nimport axios from 'axios';\nimport { IntlProvider, FormattedMessage, FormattedDate } from 'react-intl';\nimport Dropzone from 'react-dropzone';\n\nvar path = null\n\nswitch (process.env.NODE_ENV) {\n  case 'production':\n    path = 'https://tenttiappi.herokuapp.com'\n    break;\n  case 'development':\n    path = 'http://localhost:5000'\n    break;\n  case 'test':\n    path = 'http://localhost:5000'\n    break;\n  default:\n    throw \"Environment not properly set!\"\n}\n\nconst messages = {\n  en: {\n    heading: 'Welcome'\n  },\n  fi: {\n    heading: 'Tervetuloa'\n  },\n}\n\nfunction reducer(state, action) {\n  let deepCopy = JSON.parse(JSON.stringify(state))\n  switch (action.type) {\n    case 'increment':\n      return { count: state.count + 1 };\n\n    case \"ANSWER_CHANGED\":\n      deepCopy[action.data.answerIndex].answer = action.data.newText;\n      return deepCopy\n\n    // case 'IHMISEN_LISAYS':\n    //   let uusiHenkilö = { uid: uuid(), etunimi: \"\", sukunimi: \"\", ikä: 0 }\n    //   syväKopio.push(uusiHenkilö)\n    //   return syväKopio\n\n    // case 'IHMISEN_POISTO':\n    //   syväKopio.splice(action.data, 1)\n    //   return syväKopio\n\n    case \"INIT_DATA\":\n      return action.data\n\n    default:\n      throw new Error();\n  }\n}\n\nfunction App(props) {\n\n  const [palautus, setPalautus] = useState(false)\n  const [dataAlustettu, setDataAlustettu] = useState(false)\n  const [activeQuestions, setActiveQuestions] = useState([])\n  const [showExam, setShowExam] = useState(0)\n  const [state, dispatch] = useReducer(reducer, []);\n\n  const [data2, setData2] = useState([])\n  const [dataAlustettu2, setDataAlustettu2] = useState(false)\n\n  const [locale, setLocale] = useState('en')\n\n  useEffect(() => {\n\n    // const createData = async () => {\n\n    //   try {\n\n    //     let result = await axios.post(\"http://localhost:3005/tentit\", initialData)\n    //     dispatch({ type: \"INIT_DATA\", data: initialData })\n    //     // setData(initialData)\n    //     setDataAlustettu(true)\n\n    //   } catch (exception) {\n    //     alert(\"Tietokannan alustaminen epäonnistui\")\n    //   }\n    // }\n\n    const fetchData = async () => {\n      try {\n        let result = await axios.get(path + \"/tentit\")\n\n        if (result.data.length > 0) {\n          for (var i = 0; i < result.data.length; i++) {\n            result.data[i].kysymykset = []\n            let kysymykset = await axios.get(path + \"/tenttikysymykset/\" + result.data[i].id)\n            result.data[i].kysymykset = kysymykset.data\n\n            // if (result.data[i].kysely.length > 0){\n            //   for (var j = 0; j < result.data[i].kysely.length; j++){\n            //     result.data[i].kysely[j].vastaukset = []\n            //     let vaihtoehdot  = await axios.get(\"http://localhost:5000/vaihtoehdot/\" + result.data[i].kysely[j].kysymys_id)\n            //     result.data[i].kysely[j].vaihtoehdot = vaihtoehdot.data\n            //   }\n            // }\n          }\n\n          setData2(result.data)\n          setDataAlustettu2(true)\n\n          dispatch({ type: \"INIT_DATA\", data: result.data })\n        } else {\n          throw (\"Nyt pitää data kyllä alustaa!\")\n        }\n      }\n      catch (exception) {\n        // createData();\n        console.log(exception)\n      }\n    }\n    fetchData();\n  }, [])\n\n  //SEH -> Structured Exception Handling\n  // useEffect(() => {\n\n  //   const updateData = async () => {\n  //     try {\n  //       let result = await axios.put(\"http://localhost:3005/bugs\", state)\n  //     } catch (exception) {\n  //       console.log(\"Datan päivitys ei onnistunut\")\n  //     }\n  //     finally {\n\n  //     }\n  //   }\n\n  //   if (dataAlustettu) {\n  //     updateData();\n  //   }\n  // }, [state])\n\n  // useEffect(() => {\n  //   let jemma = window.localStorage;\n  //   let newData = jemma.getItem(\"data\")\n  //   if (!newData) {\n  //     jemma.setItem(\"data\", JSON.stringify(data))\n  //     newData = data\n  //   } else {\n  //     setData(JSON.parse(newData));\n  //   }\n  // }, [])\n\n  // const buttonPressed = () => {\n  //   let newData = JSON.parse(JSON.stringify(data))\n  //   let finalData = data.concat(newData)\n  //   setData(finalData)\n  // }\n\n  // const answerPicked = (mainIndex, parentIndex, answerIndex, event) => {\n  //   let deepCopy = JSON.parse(JSON.stringify(data))\n  //   deepCopy[mainIndex].questions[parentIndex].answers[answerIndex].picked = event.target.checked;\n  //   setData(deepCopy)\n  // }\n\n  // const showAnswers = (item) => {\n  //   setPalautus(true)\n  // }\n\n  // const changeQuestions = (index) => {\n  //   setActiveQuestions(index)\n  // }\n\n  const changeExam = (index) => {\n    setActiveQuestions(index)\n  }\n\n  const handleChange = (e) => {\n    setLocale(e.target.value)\n  }\n\n  if (data2.length < 1)\n    return <>loading...</>\n\n  return (\n    <div>\n      <Nav />\n      <div className=\"welcome\">\n        <IntlProvider locale={locale} messages={messages[locale]} >\n          <div className=\"item\">\n            <FormattedMessage id=\"heading\"\n              defaultMessage=\"Tervetuloa\"\n              value={{ locale }}>\n            </FormattedMessage>\n          </div>\n          <div className=\"item\">\n            <FormattedDate year=\"numeric\" month=\"long\" day=\"numeric\" weekday=\"long\" value={props.date}></FormattedDate>\n          </div>\n          <div className=\"item\">\n            <select onChange={handleChange} defaultValue={locale}>\n              {['fin', 'en'].map((x) => (\n                <option key={x}>{x}</option>\n              ))}\n            </select>\n          </div>\n        </IntlProvider>\n      </div>\n      <div className=\"main\">\n        <div className=\"mainContainer\">\n          <div className=\"buttonContainer\">\n            {data2.map((tentit, index) => <button\n              key={index}\n              name={\"TenttiButton\"}\n              className=\"button2\"\n              onClick={() => changeExam(index)}>{tentit.nimi}</button>)\n            }\n          </div>\n          {palautus === false && state[activeQuestions] && state[activeQuestions].kysymykset.map((kysymykset, index) =>\n            <div className=\"questions\">\n              <div className=\"questionTitle\" key={index}>\n                {kysymykset.nimi}\n              </div>\n              {/* {vaihtoehdot.nimi && <AnswerList index={index} parentIndex={activeQuestions} answers={vaihtoehdot.nimi} />} */}\n            </div>)}\n        </div>\n        <button className=\"button\">Näytä vastaukset</button>\n        <Dropzone onDrop={acceptedFiles => console.log(acceptedFiles)}>\n          {({ getRootProps, getInputProps }) => (\n            <section>\n              <div className=\"drop\" {...getRootProps()}>\n                <input {...getInputProps()} />\n                <p>Drag 'n' drop some files here, or click to select files</p>\n              </div>\n            </section>\n          )}\n        </Dropzone>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","import { useState } from 'react';\r\nimport React, { useEffect } from 'react';\r\nimport './App.css';\r\nimport Nav from './TenttiNav';\r\n// import AnswerList from './AnswerList';\r\nimport AddAnswers from './AddAnswers';\r\n\r\nfunction App() {\r\n\r\n    const [data, setData] = useState([\r\n        {\r\n            bugs: \"Hyönteiset\", questions: [\r\n                {\r\n                    question: 'Mikä on Vespula vulgaris?',\r\n                    answers: [\r\n                        { answer: \"Piha-ampiainen\", correct: true, picked: false },\r\n                        { answer: \"Isopihtihäntä\", correct: false, picked: false },\r\n                        { answer: \"Suursukeltaja\", correct: false, picked: false },\r\n                        { answer: \"Sarvikuonokas\", correct: false, picked: false },\r\n                    ]\r\n                },\r\n                {\r\n                    question: 'Mikä on Hymenopus coronatus?',\r\n                    answers: [\r\n                        { answer: \"Ritariperhonen\", correct: false, picked: false },\r\n                        { answer: \"Orkidearukoilijasirkka\", correct: true, picked: false },\r\n                        { answer: \"Kultaheinäsirkka\", correct: false, picked: false },\r\n                        { answer: \"Täpläpaarma\", correct: false, picked: false },\r\n                    ]\r\n                },\r\n            ]\r\n        },\r\n        {\r\n            bugs: \"Hämähäkkieläimet\", questions: [\r\n                {\r\n                    question: 'Mikä on Mitopus morio?',\r\n                    answers: [\r\n                        { answer: \"Täplälukki\", correct: false, picked: false },\r\n                        { answer: \"Seinälukki\", correct: false, picked: false },\r\n                        { answer: \"Keisarilukki\", correct: false, picked: false },\r\n                        { answer: \"Metsälukki\", correct: true, picked: false },\r\n                    ]\r\n                },\r\n                {\r\n                    question: 'Mikä on Pandinus imperator?',\r\n                    answers: [\r\n                        { answer: \"Keisariskorpioni\", correct: true, picked: false },\r\n                        { answer: \"Kenttäskorpioni\", correct: false, picked: false },\r\n                        { answer: \"Brontoscorpio (ukkosskorpioni)\", correct: false, picked: false },\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    ])\r\n\r\n    const [palautus, setPalautus] = useState(false)\r\n    const [activeTest, setActiveTest] = useState(0)\r\n    const [showExam, setShowExam] = useState(0)\r\n\r\n    useEffect(() => {\r\n        let jemma = window.localStorage;\r\n        let newData = jemma.getItem(\"data\")\r\n        if (!newData) {\r\n            jemma.setItem(\"data\", JSON.stringify(data))\r\n            newData = data\r\n        } else {\r\n            setData(JSON.parse(newData));\r\n        }\r\n    }, [])\r\n\r\n    // const buttonPressed = () => {\r\n    //     let newData = JSON.parse(JSON.stringify(data))\r\n    //     let finalData = data.concat(newData)\r\n    //     setData(finalData)\r\n    // }\r\n\r\n    const answerPicked = (examIndex, questionIndex, answerIndex, event) => {\r\n        let deepCopy = JSON.parse(JSON.stringify(data))\r\n        deepCopy[examIndex].questions[questionIndex].answers[answerIndex].picked = event.target.checked;\r\n        setData(deepCopy)\r\n    }\r\n\r\n    const showAnswers = (examIndex, questionIndex, answerIndex, event) => {\r\n        let deepCopy = JSON.parse(JSON.stringify(data))\r\n        deepCopy[examIndex].questions[questionIndex].answers[answerIndex].correct = event.target.checked;\r\n        setData(deepCopy)\r\n    }\r\n\r\n    const changeQuestions = (index) => {\r\n        setActiveTest(index)\r\n    }\r\n\r\n    const addItem = (mainIndex, questionIndex) => {\r\n        let deepCopy = JSON.parse(JSON.stringify(data))\r\n        deepCopy[mainIndex].questions[questionIndex].answers.push({ answer: \"\", correct: false, picked: false })\r\n        setData(deepCopy)\r\n    }\r\n\r\n    // props.itemEdited(props.parentIndex, props.index, answerIndex, event)\r\n\r\n    const itemEdited = (mainIndex, questionIndex, answerIndex, event) => {\r\n        let deepCopy = JSON.parse(JSON.stringify(data))\r\n        deepCopy[mainIndex].questions[questionIndex].answers[answerIndex].answer = event.target.value;\r\n        setData(deepCopy)\r\n    }\r\n\r\n    const deleteItem = (examIndex, questionIndex, answerIndex) => {\r\n        let deepCopy = JSON.parse(JSON.stringify(data))\r\n        deepCopy[examIndex].questions[questionIndex].answers.splice(answerIndex, 1)\r\n        setData(deepCopy)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Nav />\r\n            <div className=\"main\">\r\n                <div className=\"mainContainer\">\r\n                    <div className=\"buttonContainer\">\r\n                        {data.map((bugs, index) => <button\r\n                            key={index}\r\n                            className=\"button2\"\r\n                            onClick={() => changeQuestions(index)}>{bugs.bugs}</button>)\r\n                        }\r\n                    </div>\r\n                    {palautus === false && data[activeTest].questions.map((item, questionIndex) =>\r\n                        <div className=\"questions\">\r\n                            <input className=\"input\" value={item.question}></input>\r\n                            {item.answers && <AddAnswers questionIndex={questionIndex}\r\n                                examIndex={activeTest}\r\n                                answers={item.answers}\r\n                                answerPicked={answerPicked}\r\n                                itemEdited={itemEdited}\r\n                                deleteItem={deleteItem} />}\r\n                            <div className=\"buttonContainer\">\r\n                                <button className=\"button3\" onClick={() => addItem(activeTest, questionIndex)}>+</button>\r\n                            </div>\r\n                        </div>)}\r\n                    <div className=\"buttonContainer\">\r\n                        <button className=\"button\" onClick={() => showAnswers(activeTest)}>Näytä vastaukset</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport AppAdd from './AppAdd';\nimport reportWebVitals from './reportWebVitals';\nimport { IntlProvider } from \"react-intl\";\n\nReactDOM.render(\n  <IntlProvider locale='en'>\n    <App />\n  </IntlProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}